Extended Euclidean Algorithm

The Euclidean algorithm is basically there for finding gcd of two numbers using modulus operation. Where we say if b<a then gcd(a,b) = gcd(b,a%b) and 
the result is a if b==0 as base case.

	int gcd (int a, int b) {
    if (b == 0)
        return a;
    else
        return gcd (b, a % b);
}


We know that HCF of two number letâ€™s say a,b and hcf be g, then g can be represented as a*x+b*y for some x and y. Extended Euclidean theorem helps in 
finding both x and y. What we could do is to pass x and y to hcf function by reference and then update both of them for each call of function as 


int gcd(int a, int b, int& x, int& y) {
    if (b == 0) {
        x = 1;
        y = 0;
        return a;
    }
    int x1, y1;
    int d = gcd(b, a % b, x1, y1);
    x = y1;
    y = x1 - y1 * (a / b);
    return d;
}

